Microsoft (R) Macro Assembler Version 14.43.34809.0	    03/31/25 00:28:15
Main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 



 00000000			.data
 00000002			Card STRUCT
 00000000  00			   symbol BYTE ?
 00000001  00			   state BYTE 0 ; 0=hidden, 1=peek, 2=found, 3=wrong
				Card ENDS

 = 00000023			CARD_BACK_CHAR EQU 35
 00000000 02			cardRowPadding BYTE 2
 00000001 04			cardColPadding BYTE 4

 00000002 00			cursorX BYTE 0
 00000003 00			cursorY BYTE 0

				; GRID_ROWS * GRID_COLS MUST BE EVEN
 = 00000003			GRID_ROWS EQU 3
 = 00000006			GRID_COLS EQU 6
 = 00000002			GRID_ELEM_SIZE EQU TYPE Card
 00000004  00000012 [		grid Card GRID_ROWS * GRID_COLS DUP(<33,0>)
	    21 00
	   ]
 00000028 03			gridOriginX BYTE 3
 00000029 01			gridOriginY BYTE 1

 = 00000009			NUM_SYMBOLS EQU (GRID_ROWS * GRID_COLS) / 2
 0000002A  00000012 [		randSymbols BYTE NUM_SYMBOLS*2 DUP(?)
	    00
	   ]


 0000003C 00000000		peakOne DWORD 0

 00000040 00			numFound BYTE 0



 00000000			.code

				; === MoveRight =================
 00000000			MoveRight PROC

 00000000  8A 15 00000002 R	 mov dl, cursorX
 00000006  FE C2		 inc dl

				 .IF dl >= 0 && dl < GRID_COLS
 00000008  80 FA 00	   *	    cmp    dl, 000h
 0000000B  72 0B	   *	    jb	@C0001
 0000000D  80 FA 06	   *	    cmp    dl, GRID_COLS
 00000010  73 06	   *	    jae    @C0001
 00000012  88 15 00000002 R	    mov cursorX, dl
				 .ENDIF
 00000018		   *@C0001:

 00000018  C3			 ret

 00000019			MoveRight ENDP

				; === MoveLeft =================
 00000019			MoveLeft PROC

 00000019  8A 15 00000002 R	 mov dl, cursorX
 0000001F  FE CA		 dec dl

				 .IF dl >= 0 && dl < GRID_COLS
 00000021  80 FA 00	   *	    cmp    dl, 000h
 00000024  72 0B	   *	    jb	@C0004
 00000026  80 FA 06	   *	    cmp    dl, GRID_COLS
 00000029  73 06	   *	    jae    @C0004
 0000002B  88 15 00000002 R	    mov cursorX, dl
				 .ENDIF
 00000031		   *@C0004:

 00000031  C3			 ret

 00000032			MoveLeft ENDP


				; === MoveUp =================
 00000032			MoveUp PROC

 00000032  8A 35 00000003 R	 mov dh, cursorY
 00000038  FE CE		 dec dh

				 .IF dh >= 0 && dh < GRID_ROWS
 0000003A  80 FE 00	   *	    cmp    dh, 000h
 0000003D  72 0B	   *	    jb	@C0007
 0000003F  80 FE 03	   *	    cmp    dh, GRID_ROWS
 00000042  73 06	   *	    jae    @C0007
 00000044  88 35 00000003 R	    mov cursorY, dh
				 .ENDIF
 0000004A		   *@C0007:

 0000004A  C3			 ret

 0000004B			MoveUp ENDP


				; === MoveDown =================
 0000004B			MoveDown PROC

 0000004B  8A 35 00000003 R	 mov dh, cursorY
 00000051  FE C6		 inc dh

				 .IF dh >= 0 && dh < GRID_ROWS
 00000053  80 FE 00	   *	    cmp    dh, 000h
 00000056  72 0B	   *	    jb	@C000A
 00000058  80 FE 03	   *	    cmp    dh, GRID_ROWS
 0000005B  73 06	   *	    jae    @C000A
 0000005D  88 35 00000003 R	    mov cursorY, dh
				 .ENDIF
 00000063		   *@C000A:

 00000063  C3			 ret

 00000064			MoveDown ENDP


				; === DrawBoard ===============================
 00000064			DrawBoard PROC USES ecx ebx edi eax esi
				   ; call Clrscr

 00000064  51		   *	    push   ecx
 00000065  53		   *	    push   ebx
 00000066  57		   *	    push   edi
 00000067  50		   *	    push   eax
 00000068  56		   *	    push   esi
 00000069  B9 00000003		   mov ecx, GRID_ROWS
 0000006E  BB 00000000		   mov ebx, 0 ; y
 00000073  BF 00000000		   mov edi, 0

 00000078			 draw_row:
 00000078  51			   push ecx
 00000079  B9 00000006		   mov ecx, GRID_COLS
 0000007E  BE 00000000		   mov esi, 0 ; x

 00000083			 draw_col:
 00000083  8B C6		   mov eax, esi
 00000085  8A 24 7D		   mov ah, (Card PTR grid[0 + edi * TYPE grid]).state
	   00000005 R
				   .IF al == cursorX && bl == cursorY
 0000008C  3A 05 00000002 R *	    cmp    al, cursorX
 00000092  75 0F	   *	    jne    @C000D
 00000094  3A 1D 00000003 R *	    cmp    bl, cursorY
 0000009A  75 07	   *	    jne    @C000D
 0000009C  B8 0000000A		      mov eax, lightGreen
				   .ELSEIF ah == 1
 000000A1  EB 1D	   *	    jmp    @C0010
 000000A3		   *@C000D:
 000000A3  80 FC 01	   *	    cmp    ah, 001h
 000000A6  75 07	   *	    jne    @C0011
 000000A8  B8 00000003		      mov eax, cyan
				   .ELSEIF ah == 3
 000000AD  EB 11	   *	    jmp    @C0013
 000000AF		   *@C0011:
 000000AF  80 FC 03	   *	    cmp    ah, 003h
 000000B2  75 07	   *	    jne    @C0014
 000000B4  B8 00000004		      mov eax, red
				   .ELSE
 000000B9  EB 05	   *	    jmp    @C0016
 000000BB		   *@C0014:
 000000BB  B8 0000000F		      mov eax, white
				   .ENDIF
 000000C0		   *@C0016:
 000000C0		   *@C0013:
 000000C0		   *@C0010:
 000000C0  E8 00000000 E	   call SetTextColor



 000000C5  8A 04 7D		   mov al, (Card PTR grid[0 + edi * TYPE grid]).state
	   00000005 R
				   .IF al == 0
 000000CC  0A C0	   *	    or	al, al
 000000CE  75 04	   *	    jne    @C0017
 000000D0  B0 23		      mov al, CARD_BACK_CHAR
				   .ELSEIF al == 3
 000000D2  EB 1C	   *	    jmp    @C0019
 000000D4		   *@C0017:
 000000D4  3C 03	   *	    cmp    al, 003h
 000000D6  75 11	   *	    jne    @C001A
 000000D8  C6 04 7D		      mov (Card PTR grid[0 + edi * TYPE grid]).state, 0
	   00000005 R 00
 000000E0  8A 04 7D		      mov al, (Card PTR grid[0 + edi * TYPE grid]).symbol
	   00000004 R
				   .ELSE
 000000E7  EB 07	   *	    jmp    @C001C
 000000E9		   *@C001A:
 000000E9  8A 04 7D		      mov al, (Card PTR grid[0 + edi * TYPE grid]).symbol
	   00000004 R
				   .ENDIF
 000000F0		   *@C001C:
 000000F0		   *@C0019:

 000000F0  50			   push eax


 000000F1  8B D6		   mov edx, esi ; set dl == x
 000000F3  8A C2		   mov al, dl
 000000F5  F6 25 00000001 R	   mul cardColPadding
 000000FB  02 05 00000028 R	   add al, gridOriginX
 00000101  8A D0		   mov dl, al

 00000103  8A F3		   mov dh, bl   ; set dh == y
 00000105  8A C6		   mov al, dh
 00000107  F6 25 00000000 R	   mul cardRowPadding
 0000010D  02 05 00000029 R	   add al, gridOriginY
 00000113  8A F0		   mov dh, al

 00000115  58			   pop eax
 00000116  E8 00000000 E	   call Gotoxy
 0000011B  E8 00000000 E	   call WriteChar

 00000120  46			   inc esi
 00000121  47			   inc edi
 00000122  49			   dec ecx
 00000123  0F 85 FFFFFF5A	   jnz draw_col

 00000129  43			   inc ebx
 0000012A  59			   pop ecx
 0000012B  49			   dec ecx
 0000012C  0F 85 FFFFFF46	   jnz draw_row

				   ret
 00000132  5E		   *	    pop    esi
 00000133  58		   *	    pop    eax
 00000134  5F		   *	    pop    edi
 00000135  5B		   *	    pop    ebx
 00000136  59		   *	    pop    ecx
 00000137  C3		   *	    ret    00000h
 00000138			DrawBoard ENDP


				; === MAIN ==========================================================
 00000138			main PROC

 00000138  A0 00000005 R	  mov al, (Card PTR grid).state

				; GENERATE RANDOM SYMBOLS IN PAIRS
				   ; FILL ARRAY
 0000013D  B9 00000009		   mov ecx, NUM_SYMBOLS
 00000142  BB 00000000		   mov ebx, 0
 00000147  B0 61		   mov al, 97

 00000149			 char_init_loop:
 00000149  88 83 0000002A R	   mov randSymbols[ebx], al
 0000014F  43			   inc ebx
 00000150  88 83 0000002A R	   mov randSymbols[ebx], al
 00000156  FE C0		   inc al
 00000158  43			   inc ebx
 00000159  E2 EE		   loop char_init_loop

				   ; SHUFFLE ARRAY
 0000015B  B9 00000012		   mov ecx, NUM_SYMBOLS*2
 00000160  BB 00000000		   mov ebx, 0
 00000165			 char_rand_loop:
 00000165  B8 00000012		   mov eax, NUM_SYMBOLS*2
 0000016A  E8 00000000 E	   call RandomRange
 0000016F  8A 93 0000002A R	   mov dl, randSymbols[ebx]
 00000175  52			   push edx
 00000176  8A 90 0000002A R	   mov dl, randSymbols[eax]
 0000017C  88 93 0000002A R	   mov randSymbols[ebx], dl
 00000182  5A			   pop edx
 00000183  88 90 0000002A R	   mov randSymbols[eax], dl
 00000189  43			   inc ebx
 0000018A  E2 D9		   loop char_rand_loop

				   ; LOAD ARRAY INTO CARDS
 0000018C  B9 00000003		   mov ecx, GRID_ROWS
 00000191  BB 00000000		   mov ebx, 0 ; y
 00000196  BF 00000000		   mov edi, 0

 0000019B			 loop_row:
 0000019B  51			   push ecx
 0000019C  B9 00000006		   mov ecx, GRID_COLS
 000001A1  BE 00000000		   mov esi, 0 ; x

 000001A6			 loop_col:
 000001A6  8A 87 0000002A R	   mov al, randSymbols[edi]
 000001AC  88 04 7D		   mov (Card PTR grid[0 + edi * TYPE grid]).symbol, al
	   00000004 R

 000001B3  46			   inc esi
 000001B4  47			   inc edi
 000001B5  E2 EF		   loop loop_col

 000001B7  43			   inc ebx
 000001B8  59			   pop ecx
 000001B9  E2 E0		   loop loop_row


				; GAME LOOP
 000001BB  BB 00000002		   mov ebx, TYPE WORD
				   .WHILE 1
 000001C0		   *@C001D:
 000001C0  E8 FFFFFE9F		      call DrawBoard
 000001C5  E8 00000000 E	      call ReadChar
				      .IF AX == 4D00h ; right
 000001CA  66| 3D 4D00	   *	    cmp    ax, 04D00h
 000001CE  75 0A	   *	    jne    @C001E
				         INVOKE MoveRight
 000001D0  E8 FFFFFE2B	   *	    call   MoveRight
				      .ELSEIF AX == 4800h ; up
 000001D5  E9 000000EC	   *	    jmp    @C0020
 000001DA		   *@C001E:
 000001DA  66| 3D 4800	   *	    cmp    ax, 04800h
 000001DE  75 0A	   *	    jne    @C0021
				         INVOKE MoveUp
 000001E0  E8 FFFFFE4D	   *	    call   MoveUp
				      .ELSEIF AX == 5000h ; down
 000001E5  E9 000000DC	   *	    jmp    @C0023
 000001EA		   *@C0021:
 000001EA  66| 3D 5000	   *	    cmp    ax, 05000h
 000001EE  75 0A	   *	    jne    @C0024
				         INVOKE MoveDown
 000001F0  E8 FFFFFE56	   *	    call   MoveDown
				      .ELSEIF AX == 4B00h ; left
 000001F5  E9 000000CC	   *	    jmp    @C0026
 000001FA		   *@C0024:
 000001FA  66| 3D 4B00	   *	    cmp    ax, 04B00h
 000001FE  75 0A	   *	    jne    @C0027
				         INVOKE MoveLeft
 00000200  E8 FFFFFE14	   *	    call   MoveLeft
				      .ELSEIF AX == 3920h ; space
 00000205  E9 000000BC	   *	    jmp    @C0029
 0000020A		   *@C0027:
 0000020A  66| 3D 3920	   *	    cmp    ax, 03920h
 0000020E  75 75	   *	    jne    @C002A
				         ; GET CARD INDEX UNDER CURSOR
 00000210  B8 00000000		         mov eax, 0
 00000215  A0 00000003 R	         mov al, cursorY
 0000021A  B3 06		         mov bl, GRID_COLS
 0000021C  F6 E3		         mul bl
 0000021E  02 05 00000002 R	         add al, cursorX

				         ; LOAD CARD AND CHECK STATE
 00000224  8D 1C 45		         lea ebx, grid[0 + eax * TYPE grid]
	   00000004 R
 0000022B  8A 53 01		         mov dl, (Card PTR [ebx]).state
				         .IF dl == 0
 0000022E  0A D2	   *	    or	dl, dl
 00000230  0F 85 00000090  *	    jne    @C002C
 00000236  C6 43 01 01		            mov (Card PTR [ebx]).state, 1

				            .IF peakOne == 0
 0000023A  83 3D 0000003C R
	   00		   *	    cmp    peakOne, 000h
 00000241  75 08	   *	    jne    @C002E
 00000243  89 1D 0000003C R	               mov peakOne, ebx
				            .ELSE
 00000249  EB 38	   *	    jmp    @C0030
 0000024B		   *@C002E:
 0000024B  A1 0000003C R	               mov eax, peakOne
 00000250  8A 33		               mov dh, (Card PTR [ebx]).symbol
 00000252  8A 10		               mov dl, (Card PTR [eax]).symbol

				               .IF dh == dl
 00000254  3A F2	   *	    cmp    dh, dl
 00000256  75 19	   *	    jne    @C0031
 00000258  C6 43 01 02		                  mov (Card PTR [ebx]).state, 2
 0000025C  C6 40 01 02		                  mov (Card PTR [eax]).state, 2
 00000260  FE 05 00000040 R	                  inc numFound
				                  .IF numFound == NUM_SYMBOLS
 00000266  80 3D 00000040 R
	   09		   *	    cmp    numFound, NUM_SYMBOLS
 0000026D  75 0A	   *	    jne    @C0033
				                     ; GAME WON
				                  .ENDIF
				               .ELSE
 0000026F  EB 08	   *	    jmp    @C0035
 00000271		   *@C0031:
 00000271  C6 43 01 03		                  mov (Card PTR [ebx]).state, 3
 00000275  C6 40 01 03		                  mov (Card PTR [eax]).state, 3
				               .ENDIF
 00000279		   *@C0035:
 00000279		   *@C0033:
 00000279  C7 05 0000003C R	               mov peakOne, 0
	   00000000
				            .ENDIF


				         .ENDIF
 00000283		   *@C0030:
				      .ELSEIF AX == 2960h ; ~
 00000283  EB 41	   *	    jmp    @C0036
 00000285		   *@C002A:
 00000285  66| 3D 2960	   *	    cmp    ax, 02960h
 00000289  75 37	   *	    jne    @C0037
 0000028B  B9 00000003		         mov ecx, GRID_ROWS
 00000290  BB 00000000		         mov ebx, 0 ; y
 00000295  BF 00000000		         mov edi, 0
				      
 0000029A			       loop_row_1:
 0000029A  51			         push ecx
 0000029B  B9 00000006		         mov ecx, GRID_COLS
 000002A0  BE 00000000		         mov esi, 0 ; x
				      
 000002A5			       loop_col_1:
 000002A5  8A 04 7D		         mov al, (Card PTR grid[0 + edi * TYPE grid]).state
	   00000005 R
				         .IF al == 0
 000002AC  0A C0	   *	    or	al, al
 000002AE  75 08	   *	    jne    @C0039
 000002B0  C6 04 7D		            mov (Card PTR grid[0 + edi * TYPE grid]).state, 3
	   00000005 R 03
				         .ENDIF
				      
 000002B8		   *@C0039:
 000002B8  46			         inc esi
 000002B9  47			         inc edi
 000002BA  E2 E9		         loop loop_col_1
				      
 000002BC  43			         inc ebx
 000002BD  59			         pop ecx
 000002BE  E2 DA		         loop loop_row_1

				      .ELSE
 000002C0  EB 04	   *	    jmp    @C003B
 000002C2		   *@C0037:
 000002C2  66| B8 0000		         mov AX, 0
				      .ENDIF
				   .ENDW
 000002C6		   *@C003B:
 000002C6		   *@C0036:
 000002C6		   *@C0029:
 000002C6		   *@C0026:
 000002C6		   *@C0023:
 000002C6		   *@C0020:
 000002C6		   *@C002C:
 000002C6  E9 FFFFFEF5	   *	    jmp    @C001D
				   
				   exit
 000002CB  6A 00	   *	    push   +000000000h
 000002CD  E8 00000000 E   *	    call   ExitProcess
 000002D2			main ENDP




				END main
Microsoft (R) Macro Assembler Version 14.43.34809.0	    03/31/25 00:28:15
Main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
Card . . . . . . . . . . . . . .	 00000002
  symbol . . . . . . . . . . . .	 00000000	 Byte
  state  . . . . . . . . . . . .	 00000001	 Byte
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000041 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002D2 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawBoard  . . . . . . . . . . .	P Near	 00000064 _TEXT	Length= 000000D4 Public STDCALL
  draw_row . . . . . . . . . . .	L Near	 00000078 _TEXT	
  draw_col . . . . . . . . . . .	L Near	 00000083 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MoveDown . . . . . . . . . . . .	P Near	 0000004B _TEXT	Length= 00000019 Public STDCALL
MoveLeft . . . . . . . . . . . .	P Near	 00000019 _TEXT	Length= 00000019 Public STDCALL
MoveRight  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000019 Public STDCALL
MoveUp . . . . . . . . . . . . .	P Near	 00000032 _TEXT	Length= 00000019 Public STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000138 _TEXT	Length= 0000019A Public STDCALL
  char_init_loop . . . . . . . .	L Near	 00000149 _TEXT	
  char_rand_loop . . . . . . . .	L Near	 00000165 _TEXT	
  loop_row . . . . . . . . . . .	L Near	 0000019B _TEXT	
  loop_col . . . . . . . . . . .	L Near	 000001A6 _TEXT	
  loop_row_1 . . . . . . . . . .	L Near	 0000029A _TEXT	
  loop_col_1 . . . . . . . . . .	L Near	 000002A5 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CARD_BACK_CHAR . . . . . . . . .	Number	 00000023h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GRID_COLS  . . . . . . . . . . .	Number	 00000006h   
GRID_ELEM_SIZE . . . . . . . . .	Number	 00000002h   
GRID_ROWS  . . . . . . . . . . .	Number	 00000003h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUM_SYMBOLS  . . . . . . . . . .	Number	 00000009h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cardColPadding . . . . . . . . .	Byte	 00000001 _DATA	
cardRowPadding . . . . . . . . .	Byte	 00000000 _DATA	
cursorX  . . . . . . . . . . . .	Byte	 00000002 _DATA	
cursorY  . . . . . . . . . . . .	Byte	 00000003 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
gridOriginX  . . . . . . . . . .	Byte	 00000028 _DATA	
gridOriginY  . . . . . . . . . .	Byte	 00000029 _DATA	
grid . . . . . . . . . . . . . .	Card	 00000004 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numFound . . . . . . . . . . . .	Byte	 00000040 _DATA	
peakOne  . . . . . . . . . . . .	DWord	 0000003C _DATA	
randSymbols  . . . . . . . . . .	Byte	 0000002A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
