Microsoft (R) Macro Assembler Version 14.43.34809.0	    03/31/25 01:01:02
Main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 



 00000000			.data
 00000002			Card STRUCT
 00000000  00			   symbol BYTE ?
 00000001  00			   state BYTE 0 ; 0=hidden, 1=peek, 2=found, 3=wrong
				Card ENDS

 = 00000023			CARD_BACK_CHAR EQU 35
 00000000 02			cardRowPadding BYTE 2
 00000001 04			cardColPadding BYTE 4

 00000002 00			cursorX BYTE 0
 00000003 00			cursorY BYTE 0

				; GRID_ROWS * GRID_COLS MUST BE EVEN
 = 00000003			GRID_ROWS EQU 3
 = 00000006			GRID_COLS EQU 6
 = 00000002			GRID_ELEM_SIZE EQU TYPE Card
 00000004  00000012 [		grid Card GRID_ROWS * GRID_COLS DUP(<33,0>)
	    21 00
	   ]
 00000028 03			gridOriginX BYTE 3
 00000029 01			gridOriginY BYTE 1

 = 00000009			NUM_SYMBOLS EQU (GRID_ROWS * GRID_COLS) / 2
 0000002A  00000012 [		randSymbols BYTE NUM_SYMBOLS*2 DUP(?)
	    00
	   ]


 0000003C 00000000		peakOne DWORD 0

 00000040 00			numFound BYTE 0


 00000041 57 65 6C 63 6F	welcomeMessage1 BYTE "Welcome to Memory Matching!...",0
	   6D 65 20 74 6F
	   20 4D 65 6D 6F
	   72 79 20 4D 61
	   74 63 68 69 6E
	   67 21 2E 2E 2E
	   00
 00000060 53 65 6C 65 63	welcomeMessage2 BYTE "Select cards with the arrow keys...",0
	   74 20 63 61 72
	   64 73 20 77 69
	   74 68 20 74 68
	   65 20 61 72 72
	   6F 77 20 6B 65
	   79 73 2E 2E 2E
	   00
 00000084 52 65 76 65 61	welcomeMessage3 BYTE "Reveal the selected card with space...",0
	   6C 20 74 68 65
	   20 73 65 6C 65
	   63 74 65 64 20
	   63 61 72 64 20
	   77 69 74 68 20
	   73 70 61 63 65
	   2E 2E 2E 00
 000000AB 45 61 63 68 20	welcomeMessage4 BYTE "Each card has exactly one match...",0
	   63 61 72 64 20
	   68 61 73 20 65
	   78 61 63 74 6C
	   79 20 6F 6E 65
	   20 6D 61 74 63
	   68 2E 2E 2E 00
 000000CE 49 66 20 74 68	welcomeMessage5 BYTE "If the last two revealed cards match, they remain visible...",0
	   65 20 6C 61 73
	   74 20 74 77 6F
	   20 72 65 76 65
	   61 6C 65 64 20
	   63 61 72 64 73
	   20 6D 61 74 63
	   68 2C 20 74 68
	   65 79 20 72 65
	   6D 61 69 6E 20
	   76 69 73 69 62
	   6C 65 2E 2E 2E
	   00
 0000010B 46 69 6E 64 20	welcomeMessage6 BYTE "Find all matches to win!...",0
	   61 6C 6C 20 6D
	   61 74 63 68 65
	   73 20 74 6F 20
	   77 69 6E 21 2E
	   2E 2E 00


 00000000			.code

				; === MoveRight =================
 00000000			MoveRight PROC

 00000000  8A 15 00000002 R	 mov dl, cursorX
 00000006  FE C2		 inc dl

				 .IF dl >= 0 && dl < GRID_COLS
 00000008  80 FA 00	   *	    cmp    dl, 000h
 0000000B  72 0B	   *	    jb	@C0001
 0000000D  80 FA 06	   *	    cmp    dl, GRID_COLS
 00000010  73 06	   *	    jae    @C0001
 00000012  88 15 00000002 R	    mov cursorX, dl
				 .ENDIF
 00000018		   *@C0001:

 00000018  C3			 ret

 00000019			MoveRight ENDP

				; === MoveLeft =================
 00000019			MoveLeft PROC

 00000019  8A 15 00000002 R	 mov dl, cursorX
 0000001F  FE CA		 dec dl

				 .IF dl >= 0 && dl < GRID_COLS
 00000021  80 FA 00	   *	    cmp    dl, 000h
 00000024  72 0B	   *	    jb	@C0004
 00000026  80 FA 06	   *	    cmp    dl, GRID_COLS
 00000029  73 06	   *	    jae    @C0004
 0000002B  88 15 00000002 R	    mov cursorX, dl
				 .ENDIF
 00000031		   *@C0004:

 00000031  C3			 ret

 00000032			MoveLeft ENDP


				; === MoveUp =================
 00000032			MoveUp PROC

 00000032  8A 35 00000003 R	 mov dh, cursorY
 00000038  FE CE		 dec dh

				 .IF dh >= 0 && dh < GRID_ROWS
 0000003A  80 FE 00	   *	    cmp    dh, 000h
 0000003D  72 0B	   *	    jb	@C0007
 0000003F  80 FE 03	   *	    cmp    dh, GRID_ROWS
 00000042  73 06	   *	    jae    @C0007
 00000044  88 35 00000003 R	    mov cursorY, dh
				 .ENDIF
 0000004A		   *@C0007:

 0000004A  C3			 ret

 0000004B			MoveUp ENDP


				; === MoveDown =================
 0000004B			MoveDown PROC

 0000004B  8A 35 00000003 R	 mov dh, cursorY
 00000051  FE C6		 inc dh

				 .IF dh >= 0 && dh < GRID_ROWS
 00000053  80 FE 00	   *	    cmp    dh, 000h
 00000056  72 0B	   *	    jb	@C000A
 00000058  80 FE 03	   *	    cmp    dh, GRID_ROWS
 0000005B  73 06	   *	    jae    @C000A
 0000005D  88 35 00000003 R	    mov cursorY, dh
				 .ENDIF
 00000063		   *@C000A:

 00000063  C3			 ret

 00000064			MoveDown ENDP


				; === DrawBoard ===============================
 00000064			DrawBoard PROC USES ecx ebx edi eax esi
				   ; call Clrscr

 00000064  51		   *	    push   ecx
 00000065  53		   *	    push   ebx
 00000066  57		   *	    push   edi
 00000067  50		   *	    push   eax
 00000068  56		   *	    push   esi
 00000069  B9 00000003		   mov ecx, GRID_ROWS
 0000006E  BB 00000000		   mov ebx, 0 ; y
 00000073  BF 00000000		   mov edi, 0

 00000078			 draw_row:
 00000078  51			   push ecx
 00000079  B9 00000006		   mov ecx, GRID_COLS
 0000007E  BE 00000000		   mov esi, 0 ; x

 00000083			 draw_col:
 00000083  8B C6		   mov eax, esi
 00000085  8A 24 7D		   mov ah, (Card PTR grid[0 + edi * TYPE grid]).state
	   00000005 R
				   .IF ah == 3 
 0000008C  80 FC 03	   *	    cmp    ah, 003h
 0000008F  75 07	   *	    jne    @C000D
 00000091  B8 00000004		      mov eax, red
				   .ELSEIF ah == 1
 00000096  EB 40	   *	    jmp    @C000F
 00000098		   *@C000D:
 00000098  80 FC 01	   *	    cmp    ah, 001h
 0000009B  75 07	   *	    jne    @C0010
 0000009D  B8 00000003		      mov eax, cyan
				   .ELSEIF al == cursorX && bl == cursorY
 000000A2  EB 34	   *	    jmp    @C0012
 000000A4		   *@C0010:
 000000A4  3A 05 00000002 R *	    cmp    al, cursorX
 000000AA  75 1B	   *	    jne    @C0013
 000000AC  3A 1D 00000003 R *	    cmp    bl, cursorY
 000000B2  75 13	   *	    jne    @C0013
				      .IF ah == 2
 000000B4  80 FC 02	   *	    cmp    ah, 002h
 000000B7  75 07	   *	    jne    @C0016
 000000B9  B8 00000007		         mov eax, lightGray
				      .ELSE
 000000BE  EB 18	   *	    jmp    @C0018
 000000C0		   *@C0016:
 000000C0  B8 0000000A		         mov eax, lightGreen
				      .ENDIF
				   .ELSEIF ah == 2
 000000C5  EB 11	   *	    jmp    @C0019
 000000C7		   *@C0013:
 000000C7  80 FC 02	   *	    cmp    ah, 002h
 000000CA  75 07	   *	    jne    @C001A
 000000CC  B8 00000008		      mov eax, gray
				   .ELSE
 000000D1  EB 05	   *	    jmp    @C001C
 000000D3		   *@C001A:
 000000D3  B8 0000000F		      mov eax, white
				   .ENDIF
 000000D8		   *@C001C:
 000000D8		   *@C0019:
 000000D8		   *@C0012:
 000000D8		   *@C000F:
 000000D8		   *@C0018:
 000000D8  E8 00000000 E	   call SetTextColor



 000000DD  8A 04 7D		   mov al, (Card PTR grid[0 + edi * TYPE grid]).state
	   00000005 R
				   .IF al == 0
 000000E4  0A C0	   *	    or	al, al
 000000E6  75 04	   *	    jne    @C001D
 000000E8  B0 23		      mov al, CARD_BACK_CHAR
				   .ELSEIF al == 3
 000000EA  EB 1C	   *	    jmp    @C001F
 000000EC		   *@C001D:
 000000EC  3C 03	   *	    cmp    al, 003h
 000000EE  75 11	   *	    jne    @C0020
 000000F0  C6 04 7D		      mov (Card PTR grid[0 + edi * TYPE grid]).state, 0
	   00000005 R 00
 000000F8  8A 04 7D		      mov al, (Card PTR grid[0 + edi * TYPE grid]).symbol
	   00000004 R
				   .ELSE
 000000FF  EB 07	   *	    jmp    @C0022
 00000101		   *@C0020:
 00000101  8A 04 7D		      mov al, (Card PTR grid[0 + edi * TYPE grid]).symbol
	   00000004 R
				   .ENDIF
 00000108		   *@C0022:
 00000108		   *@C001F:

 00000108  50			   push eax


 00000109  8B D6		   mov edx, esi ; set dl == x
 0000010B  8A C2		   mov al, dl
 0000010D  F6 25 00000001 R	   mul cardColPadding
 00000113  02 05 00000028 R	   add al, gridOriginX
 00000119  8A D0		   mov dl, al

 0000011B  8A F3		   mov dh, bl   ; set dh == y
 0000011D  8A C6		   mov al, dh
 0000011F  F6 25 00000000 R	   mul cardRowPadding
 00000125  02 05 00000029 R	   add al, gridOriginY
 0000012B  8A F0		   mov dh, al

 0000012D  58			   pop eax
 0000012E  E8 00000000 E	   call Gotoxy
 00000133  E8 00000000 E	   call WriteChar

 00000138  46			   inc esi
 00000139  47			   inc edi
 0000013A  49			   dec ecx
 0000013B  0F 85 FFFFFF42	   jnz draw_col

 00000141  43			   inc ebx
 00000142  59			   pop ecx
 00000143  49			   dec ecx
 00000144  0F 85 FFFFFF2E	   jnz draw_row

				   ret
 0000014A  5E		   *	    pop    esi
 0000014B  58		   *	    pop    eax
 0000014C  5F		   *	    pop    edi
 0000014D  5B		   *	    pop    ebx
 0000014E  59		   *	    pop    ecx
 0000014F  C3		   *	    ret    00000h
 00000150			DrawBoard ENDP


				mShowWelc MACRO message
				   mov edx, OFFSET message
				   call WriteString
				   call ReadChar
				   call Clrscr
				   .IF AX == 2960h
				      jmp game_loop
				   .ENDIF
				ENDM


				; === MAIN ==========================================================
 00000150			main PROC

 00000150  A0 00000005 R	  mov al, (Card PTR grid).state

				; GENERATE RANDOM SYMBOLS IN PAIRS
				   ; FILL ARRAY
 00000155  B9 00000009		   mov ecx, NUM_SYMBOLS
 0000015A  BB 00000000		   mov ebx, 0
 0000015F  B0 61		   mov al, 97

 00000161			 char_init_loop:
 00000161  88 83 0000002A R	   mov randSymbols[ebx], al
 00000167  43			   inc ebx
 00000168  88 83 0000002A R	   mov randSymbols[ebx], al
 0000016E  FE C0		   inc al
 00000170  43			   inc ebx
 00000171  E2 EE		   loop char_init_loop

				   ; SHUFFLE ARRAY
 00000173  B9 00000012		   mov ecx, NUM_SYMBOLS*2
 00000178  BB 00000000		   mov ebx, 0
 0000017D			 char_rand_loop:
 0000017D  B8 00000012		   mov eax, NUM_SYMBOLS*2
 00000182  E8 00000000 E	   call RandomRange
 00000187  8A 93 0000002A R	   mov dl, randSymbols[ebx]
 0000018D  52			   push edx
 0000018E  8A 90 0000002A R	   mov dl, randSymbols[eax]
 00000194  88 93 0000002A R	   mov randSymbols[ebx], dl
 0000019A  5A			   pop edx
 0000019B  88 90 0000002A R	   mov randSymbols[eax], dl
 000001A1  43			   inc ebx
 000001A2  E2 D9		   loop char_rand_loop

				   ; LOAD ARRAY INTO CARDS
 000001A4  B9 00000003		   mov ecx, GRID_ROWS
 000001A9  BB 00000000		   mov ebx, 0 ; y
 000001AE  BF 00000000		   mov edi, 0

 000001B3			 loop_row:
 000001B3  51			   push ecx
 000001B4  B9 00000006		   mov ecx, GRID_COLS
 000001B9  BE 00000000		   mov esi, 0 ; x

 000001BE			 loop_col:
 000001BE  8A 87 0000002A R	   mov al, randSymbols[edi]
 000001C4  88 04 7D		   mov (Card PTR grid[0 + edi * TYPE grid]).symbol, al
	   00000004 R

 000001CB  46			   inc esi
 000001CC  47			   inc edi
 000001CD  E2 EF		   loop loop_col

 000001CF  43			   inc ebx
 000001D0  59			   pop ecx
 000001D1  E2 E0		   loop loop_row

				; GAME START

 000001D3  8A 15 00000028 R	   mov dl, gridOriginX
 000001D9  8A 35 00000029 R	   mov dh, gridOriginY

				   mShowWelc welcomeMessage1
 000001DF  BA 00000041 R     1	   mov edx, OFFSET welcomeMessage1
 000001E4  E8 00000000 E     1	   call WriteString
 000001E9  E8 00000000 E     1	   call ReadChar
 000001EE  E8 00000000 E     1	   call Clrscr
 000001F3  66| 3D 2960	   *	    cmp    ax, 02960h
 000001F7  75 05	   *	    jne    @C0023
 000001F9  E9 0000008C	     1	      jmp game_loop
 000001FE		   *@C0023:
				   mShowWelc welcomeMessage2
 000001FE  BA 00000060 R     1	   mov edx, OFFSET welcomeMessage2
 00000203  E8 00000000 E     1	   call WriteString
 00000208  E8 00000000 E     1	   call ReadChar
 0000020D  E8 00000000 E     1	   call Clrscr
 00000212  66| 3D 2960	   *	    cmp    ax, 02960h
 00000216  75 02	   *	    jne    @C0025
 00000218  EB 70	     1	      jmp game_loop
 0000021A		   *@C0025:
				   mShowWelc welcomeMessage3
 0000021A  BA 00000084 R     1	   mov edx, OFFSET welcomeMessage3
 0000021F  E8 00000000 E     1	   call WriteString
 00000224  E8 00000000 E     1	   call ReadChar
 00000229  E8 00000000 E     1	   call Clrscr
 0000022E  66| 3D 2960	   *	    cmp    ax, 02960h
 00000232  75 02	   *	    jne    @C0027
 00000234  EB 54	     1	      jmp game_loop
 00000236		   *@C0027:
				   mShowWelc welcomeMessage4
 00000236  BA 000000AB R     1	   mov edx, OFFSET welcomeMessage4
 0000023B  E8 00000000 E     1	   call WriteString
 00000240  E8 00000000 E     1	   call ReadChar
 00000245  E8 00000000 E     1	   call Clrscr
 0000024A  66| 3D 2960	   *	    cmp    ax, 02960h
 0000024E  75 02	   *	    jne    @C0029
 00000250  EB 38	     1	      jmp game_loop
 00000252		   *@C0029:
				   mShowWelc welcomeMessage5
 00000252  BA 000000CE R     1	   mov edx, OFFSET welcomeMessage5
 00000257  E8 00000000 E     1	   call WriteString
 0000025C  E8 00000000 E     1	   call ReadChar
 00000261  E8 00000000 E     1	   call Clrscr
 00000266  66| 3D 2960	   *	    cmp    ax, 02960h
 0000026A  75 02	   *	    jne    @C002B
 0000026C  EB 1C	     1	      jmp game_loop
 0000026E		   *@C002B:
				   mShowWelc welcomeMessage6
 0000026E  BA 0000010B R     1	   mov edx, OFFSET welcomeMessage6
 00000273  E8 00000000 E     1	   call WriteString
 00000278  E8 00000000 E     1	   call ReadChar
 0000027D  E8 00000000 E     1	   call Clrscr
 00000282  66| 3D 2960	   *	    cmp    ax, 02960h
 00000286  75 02	   *	    jne    @C002D
 00000288  EB 00	     1	      jmp game_loop
 0000028A		   *@C002D:



 0000028A			 game_loop:
				; GAME LOOP
 0000028A  BB 00000002		   mov ebx, TYPE WORD
				   .WHILE numFound < NUM_SYMBOLS
 0000028F  E9 000000FD	   *	    jmp    @C002F
 00000294		   *@C0030:
 00000294  E8 FFFFFDCB		      call DrawBoard
 00000299  E8 00000000 E	      call ReadChar
				      .IF AX == 4D00h ; right
 0000029E  66| 3D 4D00	   *	    cmp    ax, 04D00h
 000002A2  75 0A	   *	    jne    @C0031
				         INVOKE MoveRight
 000002A4  E8 FFFFFD57	   *	    call   MoveRight
				      .ELSEIF AX == 4800h ; up
 000002A9  E9 000000E3	   *	    jmp    @C0033
 000002AE		   *@C0031:
 000002AE  66| 3D 4800	   *	    cmp    ax, 04800h
 000002B2  75 0A	   *	    jne    @C0034
				         INVOKE MoveUp
 000002B4  E8 FFFFFD79	   *	    call   MoveUp
				      .ELSEIF AX == 5000h ; down
 000002B9  E9 000000D3	   *	    jmp    @C0036
 000002BE		   *@C0034:
 000002BE  66| 3D 5000	   *	    cmp    ax, 05000h
 000002C2  75 0A	   *	    jne    @C0037
				         INVOKE MoveDown
 000002C4  E8 FFFFFD82	   *	    call   MoveDown
				      .ELSEIF AX == 4B00h ; left
 000002C9  E9 000000C3	   *	    jmp    @C0039
 000002CE		   *@C0037:
 000002CE  66| 3D 4B00	   *	    cmp    ax, 04B00h
 000002D2  75 0A	   *	    jne    @C003A
				         INVOKE MoveLeft
 000002D4  E8 FFFFFD40	   *	    call   MoveLeft
				      .ELSEIF AX == 3920h ; space
 000002D9  E9 000000B3	   *	    jmp    @C003C
 000002DE		   *@C003A:
 000002DE  66| 3D 3920	   *	    cmp    ax, 03920h
 000002E2  75 6C	   *	    jne    @C003D
				         ; GET CARD INDEX UNDER CURSOR
 000002E4  B8 00000000		         mov eax, 0
 000002E9  A0 00000003 R	         mov al, cursorY
 000002EE  B3 06		         mov bl, GRID_COLS
 000002F0  F6 E3		         mul bl
 000002F2  02 05 00000002 R	         add al, cursorX

				         ; LOAD CARD AND CHECK STATE
 000002F8  8D 1C 45		         lea ebx, grid[0 + eax * TYPE grid]
	   00000004 R
 000002FF  8A 53 01		         mov dl, (Card PTR [ebx]).state
				         .IF dl == 0
 00000302  0A D2	   *	    or	dl, dl
 00000304  0F 85 00000087  *	    jne    @C003F
 0000030A  C6 43 01 01		            mov (Card PTR [ebx]).state, 1

				            .IF peakOne == 0
 0000030E  83 3D 0000003C R
	   00		   *	    cmp    peakOne, 000h
 00000315  75 08	   *	    jne    @C0041
 00000317  89 1D 0000003C R	               mov peakOne, ebx
				            .ELSE
 0000031D  EB 2F	   *	    jmp    @C0043
 0000031F		   *@C0041:
 0000031F  A1 0000003C R	               mov eax, peakOne
 00000324  8A 33		               mov dh, (Card PTR [ebx]).symbol
 00000326  8A 10		               mov dl, (Card PTR [eax]).symbol

				               .IF dh == dl
 00000328  3A F2	   *	    cmp    dh, dl
 0000032A  75 10	   *	    jne    @C0044
 0000032C  C6 43 01 02		                  mov (Card PTR [ebx]).state, 2
 00000330  C6 40 01 02		                  mov (Card PTR [eax]).state, 2
 00000334  FE 05 00000040 R	                  inc numFound
				               .ELSE
 0000033A  EB 08	   *	    jmp    @C0046
 0000033C		   *@C0044:
 0000033C  C6 43 01 03		                  mov (Card PTR [ebx]).state, 3
 00000340  C6 40 01 03		                  mov (Card PTR [eax]).state, 3
				               .ENDIF
 00000344		   *@C0046:
 00000344  C7 05 0000003C R	               mov peakOne, 0
	   00000000
				            .ENDIF


				         .ENDIF
 0000034E		   *@C0043:
				      .ELSEIF AX == 2960h ; ~
 0000034E  EB 41	   *	    jmp    @C0047
 00000350		   *@C003D:
 00000350  66| 3D 2960	   *	    cmp    ax, 02960h
 00000354  75 37	   *	    jne    @C0048
 00000356  B9 00000003		         mov ecx, GRID_ROWS
 0000035B  BB 00000000		         mov ebx, 0 ; y
 00000360  BF 00000000		         mov edi, 0
				      
 00000365			       loop_row_1:
 00000365  51			         push ecx
 00000366  B9 00000006		         mov ecx, GRID_COLS
 0000036B  BE 00000000		         mov esi, 0 ; x
				      
 00000370			       loop_col_1:
 00000370  8A 04 7D		         mov al, (Card PTR grid[0 + edi * TYPE grid]).state
	   00000005 R
				         .IF al == 0
 00000377  0A C0	   *	    or	al, al
 00000379  75 08	   *	    jne    @C004A
 0000037B  C6 04 7D		            mov (Card PTR grid[0 + edi * TYPE grid]).state, 3
	   00000005 R 03
				         .ENDIF
				      
 00000383		   *@C004A:
 00000383  46			         inc esi
 00000384  47			         inc edi
 00000385  E2 E9		         loop loop_col_1
				      
 00000387  43			         inc ebx
 00000388  59			         pop ecx
 00000389  E2 DA		         loop loop_row_1

				      .ELSE
 0000038B  EB 04	   *	    jmp    @C004C
 0000038D		   *@C0048:
 0000038D  66| B8 0000		         mov AX, 0
				      .ENDIF
				   .ENDW
 00000391		   *@C004C:
 00000391		   *@C0047:
 00000391		   *@C003C:
 00000391		   *@C0039:
 00000391		   *@C0036:
 00000391		   *@C0033:
 00000391		   *@C003F:
 00000391		   *@C002F:
 00000391  80 3D 00000040 R
	   09		   *	    cmp    numFound, NUM_SYMBOLS
 00000398  0F 82 FFFFFEF6  *	    jb	@C0030

 0000039E  E8 FFFFFCC1		   call DrawBoard
				   
				   exit
 000003A3  6A 00	   *	    push   +000000000h
 000003A5  E8 00000000 E   *	    call   ExitProcess
 000003AA			main ENDP




				END main
Microsoft (R) Macro Assembler Version 14.43.34809.0	    03/31/25 01:01:02
Main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

mShowWelc  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
Card . . . . . . . . . . . . . .	 00000002
  symbol . . . . . . . . . . . .	 00000000	 Byte
  state  . . . . . . . . . . . .	 00000001	 Byte
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000127 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003AA Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawBoard  . . . . . . . . . . .	P Near	 00000064 _TEXT	Length= 000000EC Public STDCALL
  draw_row . . . . . . . . . . .	L Near	 00000078 _TEXT	
  draw_col . . . . . . . . . . .	L Near	 00000083 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MoveDown . . . . . . . . . . . .	P Near	 0000004B _TEXT	Length= 00000019 Public STDCALL
MoveLeft . . . . . . . . . . . .	P Near	 00000019 _TEXT	Length= 00000019 Public STDCALL
MoveRight  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000019 Public STDCALL
MoveUp . . . . . . . . . . . . .	P Near	 00000032 _TEXT	Length= 00000019 Public STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000150 _TEXT	Length= 0000025A Public STDCALL
  char_init_loop . . . . . . . .	L Near	 00000161 _TEXT	
  char_rand_loop . . . . . . . .	L Near	 0000017D _TEXT	
  loop_row . . . . . . . . . . .	L Near	 000001B3 _TEXT	
  loop_col . . . . . . . . . . .	L Near	 000001BE _TEXT	
  game_loop  . . . . . . . . . .	L Near	 0000028A _TEXT	
  loop_row_1 . . . . . . . . . .	L Near	 00000365 _TEXT	
  loop_col_1 . . . . . . . . . .	L Near	 00000370 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CARD_BACK_CHAR . . . . . . . . .	Number	 00000023h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GRID_COLS  . . . . . . . . . . .	Number	 00000006h   
GRID_ELEM_SIZE . . . . . . . . .	Number	 00000002h   
GRID_ROWS  . . . . . . . . . . .	Number	 00000003h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUM_SYMBOLS  . . . . . . . . . .	Number	 00000009h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cardColPadding . . . . . . . . .	Byte	 00000001 _DATA	
cardRowPadding . . . . . . . . .	Byte	 00000000 _DATA	
cursorX  . . . . . . . . . . . .	Byte	 00000002 _DATA	
cursorY  . . . . . . . . . . . .	Byte	 00000003 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
gridOriginX  . . . . . . . . . .	Byte	 00000028 _DATA	
gridOriginY  . . . . . . . . . .	Byte	 00000029 _DATA	
grid . . . . . . . . . . . . . .	Card	 00000004 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numFound . . . . . . . . . . . .	Byte	 00000040 _DATA	
peakOne  . . . . . . . . . . . .	DWord	 0000003C _DATA	
randSymbols  . . . . . . . . . .	Byte	 0000002A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
welcomeMessage1  . . . . . . . .	Byte	 00000041 _DATA	
welcomeMessage2  . . . . . . . .	Byte	 00000060 _DATA	
welcomeMessage3  . . . . . . . .	Byte	 00000084 _DATA	
welcomeMessage4  . . . . . . . .	Byte	 000000AB _DATA	
welcomeMessage5  . . . . . . . .	Byte	 000000CE _DATA	
welcomeMessage6  . . . . . . . .	Byte	 0000010B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
