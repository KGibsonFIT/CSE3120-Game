Microsoft (R) Macro Assembler Version 14.43.34809.0	    03/31/25 03:03:24
Main.asm						     Page 1 - 1


				; Authors:
				;    Peter Stelzer
				;    Kyle Gibson


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 



 00000000			.data
 00000002			Card STRUCT
 00000000  00			   symbol BYTE ?
 00000001  00			   state BYTE 0 ; 0=hidden, 1=peek, 2=found, 3=wrong
				Card ENDS

 = 00000023			CARD_BACK_CHAR EQU 35
 00000000 02			cardRowPadding BYTE 2
 00000001 04			cardColPadding BYTE 4

 00000002 00			cursorX BYTE 0
 00000003 00			cursorY BYTE 0

				; GRID_ROWS * GRID_COLS MUST BE EVEN AND NOT GREATER THAN 2*POOL_SIZE
 = 00000005			GRID_ROWS EQU 5 ; suggested max 9
 = 00000008			GRID_COLS EQU 8 ; suggested max 16
 = 00000002			GRID_ELEM_SIZE EQU TYPE Card
 00000004  00000028 [		grid Card GRID_ROWS * GRID_COLS DUP(<33,0>)
	    21 00
	   ]
 00000054 03			gridOriginX BYTE 3
 00000055 01			gridOriginY BYTE 1

 = 00000014			NUM_SYMBOLS EQU (GRID_ROWS * GRID_COLS) / 2
 00000056  00000028 [		randSymbols BYTE NUM_SYMBOLS*2 DUP(?)
	    00
	   ]


 0000007E 00000000		peek1 DWORD 0

 00000082 00			numFound BYTE 0
 00000083 00000000		numAttempts DWORD 0


 00000087 57 65 6C 63 6F	welcomeMessage1 BYTE "Welcome to Memory Matching!...",0
	   6D 65 20 74 6F
	   20 4D 65 6D 6F
	   72 79 20 4D 61
	   74 63 68 69 6E
	   67 21 2E 2E 2E
	   00
 000000A6 53 65 6C 65 63	welcomeMessage2 BYTE "Select cards with the arrow keys...",0
	   74 20 63 61 72
	   64 73 20 77 69
	   74 68 20 74 68
	   65 20 61 72 72
	   6F 77 20 6B 65
	   79 73 2E 2E 2E
	   00
 000000CA 52 65 76 65 61	welcomeMessage3 BYTE "Reveal the selected card with space...",0
	   6C 20 74 68 65
	   20 73 65 6C 65
	   63 74 65 64 20
	   63 61 72 64 20
	   77 69 74 68 20
	   73 70 61 63 65
	   2E 2E 2E 00
 000000F1 45 61 63 68 20	welcomeMessage4 BYTE "Each card has exactly one match...",0
	   63 61 72 64 20
	   68 61 73 20 65
	   78 61 63 74 6C
	   79 20 6F 6E 65
	   20 6D 61 74 63
	   68 2E 2E 2E 00
 00000114 49 66 20 74 68	welcomeMessage5 BYTE "If the last two revealed cards match, they remain visible...",0
	   65 20 6C 61 73
	   74 20 74 77 6F
	   20 72 65 76 65
	   61 6C 65 64 20
	   63 61 72 64 73
	   20 6D 61 74 63
	   68 2C 20 74 68
	   65 79 20 72 65
	   6D 61 69 6E 20
	   76 69 73 69 62
	   6C 65 2E 2E 2E
	   00
 00000151 46 69 6E 64 20	welcomeMessage6 BYTE "Find all matches to win!...",0
	   61 6C 6C 20 6D
	   61 74 63 68 65
	   73 20 74 6F 20
	   77 69 6E 21 2E
	   2E 2E 00

 0000016D 41 74 74 65 6D	infoStr1 BYTE "Attempted Matches: ",0
	   70 74 65 64 20
	   4D 61 74 63 68
	   65 73 3A 20 00
 00000181 4D 61 74 63 68	infoStr2 BYTE "Matches Remaining: ",0
	   65 73 20 52 65
	   6D 61 69 6E 69
	   6E 67 3A 20 00

 00000195 59 6F 75 20 6D	winMessage BYTE "You matched all the cards!",0
	   61 74 63 68 65
	   64 20 61 6C 6C
	   20 74 68 65 20
	   63 61 72 64 73
	   21 00

				; pool declaration must be fragmented like this else the rest of the memory tweaks
 = 00000049			POOL_SIZE EQU 73
 000001B0 41 42 43 44 45	symbolPool BYTE "ABCDEFGHIJKLM"
	   46 47 48 49 4A
	   4B 4C 4D
 000001BD  4E 4F 50 51 52	           BYTE "NOPQRSTUVWXYZ"
	   53 54 55 56 57
	   58 59 5A
 000001CA  61 62 63 64 65	           BYTE "abcdefghijklm"
	   66 67 68 69 6A
	   6B 6C 6D
 000001D7  6E 6F 70 71 72	           BYTE "nopqrstuvwxyz~"
	   73 74 75 76 77
	   78 79 7A 7E
 000001E5  21 24 25 26 2B	           BYTE "!$%&+"
 000001EA  30 31 32 33 34	           BYTE "0123456789"
	   35 36 37 38 39
 000001F4  3C 3D 3E 3F 40	           BYTE "<=>?@"


 00000000			.code

				; === MoveRight =====================================================================
				MoveRight MACRO

				 mov dl, cursorX
				 inc dl

				 .IF dl >= 0 && dl < GRID_COLS
				    mov cursorX, dl
				 .ENDIF

				ENDM

				; === MoveLeft ======================================================================
				MoveLeft MACRO

				 mov dl, cursorX
				 dec dl

				 .IF dl >= 0 && dl < GRID_COLS
				    mov cursorX, dl
				 .ENDIF

				ENDM


				; === MoveUp ========================================================================
				MoveUp MACRO

				 mov dh, cursorY
				 dec dh

				 .IF dh >= 0 && dh < GRID_ROWS
				    mov cursorY, dh
				 .ENDIF

				ENDM


				; === MoveDown ======================================================================
				MoveDown MACRO

				 mov dh, cursorY
				 inc dh

				 .IF dh >= 0 && dh < GRID_ROWS
				    mov cursorY, dh
				 .ENDIF

				ENDM


				; === DrawBoard =====================================================================
 00000000			DrawBoard PROC USES ecx ebx edi eax esi

 00000000  51		   *	    push   ecx
 00000001  53		   *	    push   ebx
 00000002  57		   *	    push   edi
 00000003  50		   *	    push   eax
 00000004  56		   *	    push   esi
 00000005  B9 00000005		   mov ecx, GRID_ROWS
 0000000A  BB 00000000		   mov ebx, 0 ; y
 0000000F  BF 00000000		   mov edi, 0

 00000014			 draw_row:
 00000014  51			   push ecx
 00000015  B9 00000008		   mov ecx, GRID_COLS
 0000001A  BE 00000000		   mov esi, 0 ; x

 0000001F			 draw_col:
				   ; Select Color
 0000001F  8B C6		   mov eax, esi
 00000021  8A 24 7D		   mov ah, (Card PTR grid[0 + edi * TYPE grid]).state
	   00000005 R
				   .IF ah == 3 
 00000028  80 FC 03	   *	    cmp    ah, 003h
 0000002B  75 07	   *	    jne    @C0001
 0000002D  B8 00000004		      mov eax, red
				   .ELSEIF ah == 1
 00000032  EB 40	   *	    jmp    @C0003
 00000034		   *@C0001:
 00000034  80 FC 01	   *	    cmp    ah, 001h
 00000037  75 07	   *	    jne    @C0004
 00000039  B8 00000003		      mov eax, cyan
				   .ELSEIF al == cursorX && bl == cursorY
 0000003E  EB 34	   *	    jmp    @C0006
 00000040		   *@C0004:
 00000040  3A 05 00000002 R *	    cmp    al, cursorX
 00000046  75 1B	   *	    jne    @C0007
 00000048  3A 1D 00000003 R *	    cmp    bl, cursorY
 0000004E  75 13	   *	    jne    @C0007
				      .IF ah == 2
 00000050  80 FC 02	   *	    cmp    ah, 002h
 00000053  75 07	   *	    jne    @C000A
 00000055  B8 00000007		         mov eax, lightGray
				      .ELSE
 0000005A  EB 18	   *	    jmp    @C000C
 0000005C		   *@C000A:
 0000005C  B8 0000000A		         mov eax, lightGreen
				      .ENDIF
				   .ELSEIF ah == 2
 00000061  EB 11	   *	    jmp    @C000D
 00000063		   *@C0007:
 00000063  80 FC 02	   *	    cmp    ah, 002h
 00000066  75 07	   *	    jne    @C000E
 00000068  B8 00000008		      mov eax, gray
				   .ELSE
 0000006D  EB 05	   *	    jmp    @C0010
 0000006F		   *@C000E:
 0000006F  B8 0000000F		      mov eax, white
				   .ENDIF
 00000074		   *@C0010:
 00000074		   *@C000D:
 00000074		   *@C0006:
 00000074		   *@C0003:
 00000074		   *@C000C:
 00000074  E8 00000000 E	   call SetTextColor


				   ; Select Card State
 00000079  8A 04 7D		   mov al, (Card PTR grid[0 + edi * TYPE grid]).state
	   00000005 R
				   .IF al == 0
 00000080  0A C0	   *	    or	al, al
 00000082  75 04	   *	    jne    @C0011
 00000084  B0 23		      mov al, CARD_BACK_CHAR
				   .ELSEIF al == 3
 00000086  EB 1C	   *	    jmp    @C0013
 00000088		   *@C0011:
 00000088  3C 03	   *	    cmp    al, 003h
 0000008A  75 11	   *	    jne    @C0014
 0000008C  C6 04 7D		      mov (Card PTR grid[0 + edi * TYPE grid]).state, 0
	   00000005 R 00
 00000094  8A 04 7D		      mov al, (Card PTR grid[0 + edi * TYPE grid]).symbol
	   00000004 R
				   .ELSE
 0000009B  EB 07	   *	    jmp    @C0016
 0000009D		   *@C0014:
 0000009D  8A 04 7D		      mov al, (Card PTR grid[0 + edi * TYPE grid]).symbol
	   00000004 R
				   .ENDIF
 000000A4		   *@C0016:
 000000A4		   *@C0013:

 000000A4  50			   push eax


				   ; Calculate Location
 000000A5  8B D6		   mov edx, esi ; set dl == x
 000000A7  8A C2		   mov al, dl
 000000A9  F6 25 00000001 R	   mul cardColPadding
 000000AF  02 05 00000054 R	   add al, gridOriginX
 000000B5  8A D0		   mov dl, al

 000000B7  8A F3		   mov dh, bl   ; set dh == y
 000000B9  8A C6		   mov al, dh
 000000BB  F6 25 00000000 R	   mul cardRowPadding
 000000C1  02 05 00000055 R	   add al, gridOriginY
 000000C7  8A F0		   mov dh, al

 000000C9  58			   pop eax
 000000CA  E8 00000000 E	   call Gotoxy
 000000CF  E8 00000000 E	   call WriteChar

				   ; Loop Stuff
 000000D4  46			   inc esi
 000000D5  47			   inc edi
 000000D6  49			   dec ecx
 000000D7  0F 85 FFFFFF42	   jnz draw_col

 000000DD  43			   inc ebx
 000000DE  59			   pop ecx
 000000DF  49			   dec ecx
 000000E0  0F 85 FFFFFF2E	   jnz draw_row

				   ret
 000000E6  5E		   *	    pop    esi
 000000E7  58		   *	    pop    eax
 000000E8  5F		   *	    pop    edi
 000000E9  5B		   *	    pop    ebx
 000000EA  59		   *	    pop    ecx
 000000EB  C3		   *	    ret    00000h
 000000EC			DrawBoard ENDP


				; === DrawInfo ======================================================================
 000000EC			DrawInfo PROC USES eax edx

 000000EC  50		   *	    push   eax
 000000ED  52		   *	    push   edx
 000000EE  B8 0000000F		   mov eax, white
 000000F3  E8 00000000 E	   call SetTextColor

				   ; Number Attempts
 000000F8  8A 15 00000054 R	   mov dl, gridOriginX
 000000FE  8A 35 00000055 R	   mov dh, gridOriginY
 00000104  B0 05		   mov al, GRID_ROWS
 00000106  F6 25 00000000 R	   mul cardRowPadding
 0000010C  04 02		   add al, 2
 0000010E  02 F0		   add dh, al

 00000110  52			   push edx

 00000111  E8 00000000 E	   call Gotoxy
				   
 00000116  BA 0000016D R	   mov EDX, OFFSET infoStr1

 0000011B  E8 00000000 E	   call WriteString

 00000120  A1 00000083 R	   mov eax, numAttempts

 00000125  E8 00000000 E	   call WriteDec


				   ; Pairs Remaining
 0000012A  5A			   pop edx
 0000012B  FE C6		   inc dh

 0000012D  E8 00000000 E	   call Gotoxy
				   
				   .IF numFound >= NUM_SYMBOLS
 00000132  80 3D 00000082 R
	   14		   *	    cmp    numFound, NUM_SYMBOLS
 00000139  72 0C	   *	    jb	@C0017
 0000013B  BA 00000195 R	      mov EDX, OFFSET winMessage
 00000140  E8 00000000 E	      call WriteString
				   .ELSE
 00000145  EB 1A	   *	    jmp    @C0019
 00000147		   *@C0017:
 00000147  BA 00000181 R	      mov EDX, OFFSET infoStr2
 0000014C  E8 00000000 E	      call WriteString

 00000151  B8 00000014		      mov eax, NUM_SYMBOLS
 00000156  2A 05 00000082 R	      sub al, numFound
 0000015C  E8 00000000 E	      call WriteDec
				   .ENDIF
 00000161		   *@C0019:

				   ret
 00000161  5A		   *	    pop    edx
 00000162  58		   *	    pop    eax
 00000163  C3		   *	    ret    00000h

 00000164			DrawInfo ENDP


				; === mShowWelc =====================================================================
				mShowWelc MACRO message
				   call Gotoxy
				   push edx
				   mov edx, OFFSET message
				   call WriteString
				   call ReadChar
				   call Clrscr
				   .IF AX == 2960h
				      jmp game_loop
				   .ENDIF
				   pop edx
				ENDM


				; === mPeekCard =====================================================================
				mPeekCard MACRO
				   ; GET CARD INDEX UNDER CURSOR
				   mov eax, 0
				   mov al, cursorY
				   mov bl, GRID_COLS
				   mul bl
				   add al, cursorX
				   
				   ; LOAD CARD AND CHECK STATE
				   lea ebx, grid[0 + eax * TYPE grid]
				   mov dl, (Card PTR [ebx]).state
				   .IF dl == 0
				      mov (Card PTR [ebx]).state, 1
				   
				      .IF peek1 == 0
				         mov peek1, ebx
				      .ELSE
				         inc numAttempts
				         mov eax, peek1
				         mov dh, (Card PTR [ebx]).symbol
				         mov dl, (Card PTR [eax]).symbol
				   
				         .IF dh == dl
				            mov (Card PTR [ebx]).state, 2
				            mov (Card PTR [eax]).state, 2
				            inc numFound
				         .ELSE
				            mov (Card PTR [ebx]).state, 3
				            mov (Card PTR [eax]).state, 3
				         .ENDIF
				         mov peek1, 0
				      .ENDIF
				   
				   
				   .ENDIF
				   
				ENDM


				; === mRevealBoard ==================================================================
				mRevealBoard MACRO
				   mov ecx, GRID_ROWS
				   mov ebx, 0 ; y
				   mov edi, 0
				 
				 loop_row_1:
				   push ecx
				   mov ecx, GRID_COLS
				   mov esi, 0 ; x
				 
				 loop_col_1:
				   mov al, (Card PTR grid[0 + edi * TYPE grid]).state
				   .IF al == 0
				      mov (Card PTR grid[0 + edi * TYPE grid]).state, 3
				   .ENDIF
				 
				   inc esi
				   inc edi
				   loop loop_col_1
				 
				   inc ebx
				   pop ecx
				   loop loop_row_1

				ENDM


				; === MAIN ==========================================================================
 00000164			main PROC

 00000164  E8 00000000 E	call Randomize

				; GENERATE RANDOM SYMBOLS IN PAIRS
				   ; SHUFFLE Pool
 00000169  B9 00000049		   mov ecx, POOL_SIZE
 0000016E  BB 00000000		   mov ebx, 0
 00000173			 pool_rand_loop:
 00000173  B8 00000049		   mov eax, POOL_SIZE
 00000178  E8 00000000 E	   call RandomRange
 0000017D  8A 93 000001B0 R	   mov dl, symbolPool[ebx]
 00000183  52			   push edx
 00000184  8A 90 000001B0 R	   mov dl, symbolPool[eax]
 0000018A  88 93 000001B0 R	   mov symbolPool[ebx], dl
 00000190  5A			   pop edx
 00000191  88 90 000001B0 R	   mov symbolPool[eax], dl
 00000197  43			   inc ebx
 00000198  E2 D9		   loop pool_rand_loop

				   ; FILL ARRAY
 0000019A  B9 00000014		   mov ecx, NUM_SYMBOLS
 0000019F  BB 00000000		   mov ebx, 0
 000001A4  BE 00000000		   mov esi, 0

 000001A9			 char_init_loop:
 000001A9  8A 86 000001B0 R	   mov al, symbolPool[esi]
 000001AF  88 83 00000056 R	   mov randSymbols[ebx], al
 000001B5  43			   inc ebx
 000001B6  88 83 00000056 R	   mov randSymbols[ebx], al
 000001BC  46			   inc esi
 000001BD  43			   inc ebx
 000001BE  E2 E9		   loop char_init_loop

				   ; SHUFFLE ARRAY
 000001C0  B9 00000028		   mov ecx, NUM_SYMBOLS*2
 000001C5  BB 00000000		   mov ebx, 0
 000001CA			 char_rand_loop:
 000001CA  B8 00000028		   mov eax, NUM_SYMBOLS*2
 000001CF  E8 00000000 E	   call RandomRange
 000001D4  8A 93 00000056 R	   mov dl, randSymbols[ebx]
 000001DA  52			   push edx
 000001DB  8A 90 00000056 R	   mov dl, randSymbols[eax]
 000001E1  88 93 00000056 R	   mov randSymbols[ebx], dl
 000001E7  5A			   pop edx
 000001E8  88 90 00000056 R	   mov randSymbols[eax], dl
 000001EE  43			   inc ebx
 000001EF  E2 D9		   loop char_rand_loop

				   ; LOAD ARRAY INTO CARDS
 000001F1  B9 00000005		   mov ecx, GRID_ROWS
 000001F6  BB 00000000		   mov ebx, 0 ; y
 000001FB  BF 00000000		   mov edi, 0

 00000200			 loop_row:
 00000200  51			   push ecx
 00000201  B9 00000008		   mov ecx, GRID_COLS
 00000206  BE 00000000		   mov esi, 0 ; x

 0000020B			 loop_col:
 0000020B  8A 87 00000056 R	   mov al, randSymbols[edi]
 00000211  88 04 7D		   mov (Card PTR grid[0 + edi * TYPE grid]).symbol, al
	   00000004 R

 00000218  46			   inc esi
 00000219  47			   inc edi
 0000021A  E2 EF		   loop loop_col

 0000021C  43			   inc ebx
 0000021D  59			   pop ecx
 0000021E  E2 E0		   loop loop_row

				; GAME START

 00000220  8A 15 00000054 R	   mov dl, gridOriginX
 00000226  8A 35 00000055 R	   mov dh, gridOriginY

				   mShowWelc welcomeMessage1
 0000022C  E8 00000000 E     1	   call Gotoxy
 00000231  52		     1	   push edx
 00000232  BA 00000087 R     1	   mov edx, OFFSET welcomeMessage1
 00000237  E8 00000000 E     1	   call WriteString
 0000023C  E8 00000000 E     1	   call ReadChar
 00000241  E8 00000000 E     1	   call Clrscr
 00000246  66| 3D 2960	   *	    cmp    ax, 02960h
 0000024A  75 05	   *	    jne    @C001A
 0000024C  E9 000000B3	     1	      jmp game_loop
 00000251		   *@C001A:
 00000251  5A		     1	   pop edx
				   mShowWelc welcomeMessage2
 00000252  E8 00000000 E     1	   call Gotoxy
 00000257  52		     1	   push edx
 00000258  BA 000000A6 R     1	   mov edx, OFFSET welcomeMessage2
 0000025D  E8 00000000 E     1	   call WriteString
 00000262  E8 00000000 E     1	   call ReadChar
 00000267  E8 00000000 E     1	   call Clrscr
 0000026C  66| 3D 2960	   *	    cmp    ax, 02960h
 00000270  75 05	   *	    jne    @C001C
 00000272  E9 0000008D	     1	      jmp game_loop
 00000277		   *@C001C:
 00000277  5A		     1	   pop edx
				   mShowWelc welcomeMessage3
 00000278  E8 00000000 E     1	   call Gotoxy
 0000027D  52		     1	   push edx
 0000027E  BA 000000CA R     1	   mov edx, OFFSET welcomeMessage3
 00000283  E8 00000000 E     1	   call WriteString
 00000288  E8 00000000 E     1	   call ReadChar
 0000028D  E8 00000000 E     1	   call Clrscr
 00000292  66| 3D 2960	   *	    cmp    ax, 02960h
 00000296  75 02	   *	    jne    @C001E
 00000298  EB 6A	     1	      jmp game_loop
 0000029A		   *@C001E:
 0000029A  5A		     1	   pop edx
				   mShowWelc welcomeMessage4
 0000029B  E8 00000000 E     1	   call Gotoxy
 000002A0  52		     1	   push edx
 000002A1  BA 000000F1 R     1	   mov edx, OFFSET welcomeMessage4
 000002A6  E8 00000000 E     1	   call WriteString
 000002AB  E8 00000000 E     1	   call ReadChar
 000002B0  E8 00000000 E     1	   call Clrscr
 000002B5  66| 3D 2960	   *	    cmp    ax, 02960h
 000002B9  75 02	   *	    jne    @C0020
 000002BB  EB 47	     1	      jmp game_loop
 000002BD		   *@C0020:
 000002BD  5A		     1	   pop edx
				   mShowWelc welcomeMessage5
 000002BE  E8 00000000 E     1	   call Gotoxy
 000002C3  52		     1	   push edx
 000002C4  BA 00000114 R     1	   mov edx, OFFSET welcomeMessage5
 000002C9  E8 00000000 E     1	   call WriteString
 000002CE  E8 00000000 E     1	   call ReadChar
 000002D3  E8 00000000 E     1	   call Clrscr
 000002D8  66| 3D 2960	   *	    cmp    ax, 02960h
 000002DC  75 02	   *	    jne    @C0022
 000002DE  EB 24	     1	      jmp game_loop
 000002E0		   *@C0022:
 000002E0  5A		     1	   pop edx
				   mShowWelc welcomeMessage6
 000002E1  E8 00000000 E     1	   call Gotoxy
 000002E6  52		     1	   push edx
 000002E7  BA 00000151 R     1	   mov edx, OFFSET welcomeMessage6
 000002EC  E8 00000000 E     1	   call WriteString
 000002F1  E8 00000000 E     1	   call ReadChar
 000002F6  E8 00000000 E     1	   call Clrscr
 000002FB  66| 3D 2960	   *	    cmp    ax, 02960h
 000002FF  75 02	   *	    jne    @C0024
 00000301  EB 01	     1	      jmp game_loop
 00000303		   *@C0024:
 00000303  5A		     1	   pop edx



 00000304			 game_loop:
				; GAME LOOP
 00000304  BB 00000002		   mov ebx, TYPE WORD
				   .WHILE numFound < NUM_SYMBOLS
 00000309  E9 00000174	   *	    jmp    @C0026
 0000030E		   *@C0027:
 0000030E  E8 FFFFFCED		      call DrawBoard
 00000313  E8 FFFFFDD4		      call DrawInfo
 00000318  E8 00000000 E	      call ReadChar
				      .IF AX == 4D00h ; right
 0000031D  66| 3D 4D00	   *	    cmp    ax, 04D00h
 00000321  75 25	   *	    jne    @C0028
				         MoveRight
 00000323  8A 15 00000002 R  1	 mov dl, cursorX
 00000329  FE C2	     1	 inc dl
 0000032B  80 FA 00	   *	    cmp    dl, 000h
 0000032E  0F 82 0000014E  *	    jb	@C002A
 00000334  80 FA 08	   *	    cmp    dl, GRID_COLS
 00000337  0F 83 00000145  *	    jae    @C002A
 0000033D  88 15 00000002 R  1	    mov cursorX, dl
				      .ELSEIF AX == 4800h ; up
 00000343  E9 0000013A	   *	    jmp    @C002D
 00000348		   *@C0028:
 00000348  66| 3D 4800	   *	    cmp    ax, 04800h
 0000034C  75 25	   *	    jne    @C002E
				         MoveUp
 0000034E  8A 35 00000003 R  1	 mov dh, cursorY
 00000354  FE CE	     1	 dec dh
 00000356  80 FE 00	   *	    cmp    dh, 000h
 00000359  0F 82 00000123  *	    jb	@C0030
 0000035F  80 FE 05	   *	    cmp    dh, GRID_ROWS
 00000362  0F 83 0000011A  *	    jae    @C0030
 00000368  88 35 00000003 R  1	    mov cursorY, dh
				      .ELSEIF AX == 5000h ; down
 0000036E  E9 0000010F	   *	    jmp    @C0033
 00000373		   *@C002E:
 00000373  66| 3D 5000	   *	    cmp    ax, 05000h
 00000377  75 25	   *	    jne    @C0034
				         MoveDown
 00000379  8A 35 00000003 R  1	 mov dh, cursorY
 0000037F  FE C6	     1	 inc dh
 00000381  80 FE 00	   *	    cmp    dh, 000h
 00000384  0F 82 000000F8  *	    jb	@C0036
 0000038A  80 FE 05	   *	    cmp    dh, GRID_ROWS
 0000038D  0F 83 000000EF  *	    jae    @C0036
 00000393  88 35 00000003 R  1	    mov cursorY, dh
				      .ELSEIF AX == 4B00h ; left
 00000399  E9 000000E4	   *	    jmp    @C0039
 0000039E		   *@C0034:
 0000039E  66| 3D 4B00	   *	    cmp    ax, 04B00h
 000003A2  75 25	   *	    jne    @C003A
				         MoveLeft
 000003A4  8A 15 00000002 R  1	 mov dl, cursorX
 000003AA  FE CA	     1	 dec dl
 000003AC  80 FA 00	   *	    cmp    dl, 000h
 000003AF  0F 82 000000CD  *	    jb	@C003C
 000003B5  80 FA 08	   *	    cmp    dl, GRID_COLS
 000003B8  0F 83 000000C4  *	    jae    @C003C
 000003BE  88 15 00000002 R  1	    mov cursorX, dl
				      .ELSEIF AX == 3920h ; space
 000003C4  E9 000000B9	   *	    jmp    @C003F
 000003C9		   *@C003A:
 000003C9  66| 3D 3920	   *	    cmp    ax, 03920h
 000003CD  75 72	   *	    jne    @C0040
				         mPeekCard
 000003CF  B8 00000000	     1	   mov eax, 0
 000003D4  A0 00000003 R     1	   mov al, cursorY
 000003D9  B3 08	     1	   mov bl, GRID_COLS
 000003DB  F6 E3	     1	   mul bl
 000003DD  02 05 00000002 R  1	   add al, cursorX
 000003E3  8D 1C 45	     1	   lea ebx, grid[0 + eax * TYPE grid]
	   00000004 R
 000003EA  8A 53 01	     1	   mov dl, (Card PTR [ebx]).state
 000003ED  0A D2	   *	    or	dl, dl
 000003EF  0F 85 0000008D  *	    jne    @C0042
 000003F5  C6 43 01 01	     1	      mov (Card PTR [ebx]).state, 1
 000003F9  83 3D 0000007E R
	   00		   *	    cmp    peek1, 0
 00000400  75 08	   *	    jne    @C0044
 00000402  89 1D 0000007E R  1	         mov peek1, ebx
 00000408  EB 35	   *	    jmp    @C0046
 0000040A		   *@C0044:
 0000040A  FF 05 00000083 R  1	         inc numAttempts
 00000410  A1 0000007E R     1	         mov eax, peek1
 00000415  8A 33	     1	         mov dh, (Card PTR [ebx]).symbol
 00000417  8A 10	     1	         mov dl, (Card PTR [eax]).symbol
 00000419  3A F2	   *	    cmp    dh, dl
 0000041B  75 10	   *	    jne    @C0047
 0000041D  C6 43 01 02	     1	            mov (Card PTR [ebx]).state, 2
 00000421  C6 40 01 02	     1	            mov (Card PTR [eax]).state, 2
 00000425  FE 05 00000082 R  1	            inc numFound
 0000042B  EB 08	   *	    jmp    @C0049
 0000042D		   *@C0047:
 0000042D  C6 43 01 03	     1	            mov (Card PTR [ebx]).state, 3
 00000431  C6 40 01 03	     1	            mov (Card PTR [eax]).state, 3
 00000435		   *@C0049:
 00000435  C7 05 0000007E R  1	         mov peek1, 0
	   00000000
 0000043F		   *@C0046:
				      .ELSEIF AX == 2960h ; ~
 0000043F  EB 41	   *	    jmp    @C004A
 00000441		   *@C0040:
 00000441  66| 3D 2960	   *	    cmp    ax, 02960h
 00000445  75 37	   *	    jne    @C004B
				         mRevealBoard
 00000447  B9 00000005	     1	   mov ecx, GRID_ROWS
 0000044C  BB 00000000	     1	   mov ebx, 0 ; y
 00000451  BF 00000000	     1	   mov edi, 0
 00000456		     1	 loop_row_1:
 00000456  51		     1	   push ecx
 00000457  B9 00000008	     1	   mov ecx, GRID_COLS
 0000045C  BE 00000000	     1	   mov esi, 0 ; x
 00000461		     1	 loop_col_1:
 00000461  8A 04 7D	     1	   mov al, (Card PTR grid[0 + edi * TYPE grid]).state
	   00000005 R
 00000468  0A C0	   *	    or	al, al
 0000046A  75 08	   *	    jne    @C004D
 0000046C  C6 04 7D	     1	      mov (Card PTR grid[0 + edi * TYPE grid]).state, 3
	   00000005 R 03
 00000474		   *@C004D:
 00000474  46		     1	   inc esi
 00000475  47		     1	   inc edi
 00000476  E2 E9	     1	   loop loop_col_1
 00000478  43		     1	   inc ebx
 00000479  59		     1	   pop ecx
 0000047A  E2 DA	     1	   loop loop_row_1
				      .ELSE
 0000047C  EB 04	   *	    jmp    @C004F
 0000047E		   *@C004B:
 0000047E  66| B8 0000		         mov AX, 0
				      .ENDIF
				   .ENDW
 00000482		   *@C004F:
 00000482		   *@C004A:
 00000482		   *@C003F:
 00000482		   *@C0039:
 00000482		   *@C0033:
 00000482		   *@C002D:
 00000482		   *@C002A:
 00000482		   *@C0030:
 00000482		   *@C0036:
 00000482		   *@C003C:
 00000482		   *@C0042:
 00000482		   *@C0026:
 00000482  80 3D 00000082 R
	   14		   *	    cmp    numFound, NUM_SYMBOLS
 00000489  0F 82 FFFFFE7F  *	    jb	@C0027

 0000048F  E8 FFFFFB6C		   call DrawBoard

 00000494  E8 FFFFFC53		   call DrawInfo

 00000499  E8 00000000 E	   call ReadChar

 0000049E  E8 00000000 E	   call Crlf


				   exit
 000004A3  6A 00	   *	    push   +000000000h
 000004A5  E8 00000000 E   *	    call   ExitProcess
 000004AA			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.43.34809.0	    03/31/25 03:03:24
Main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

MoveDown . . . . . . . . . . . .	Proc
MoveLeft . . . . . . . . . . . .	Proc
MoveRight  . . . . . . . . . . .	Proc
MoveUp . . . . . . . . . . . . .	Proc
mPeekCard  . . . . . . . . . . .	Proc
mRevealBoard . . . . . . . . . .	Proc
mShowWelc  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
Card . . . . . . . . . . . . . .	 00000002
  symbol . . . . . . . . . . . .	 00000000	 Byte
  state  . . . . . . . . . . . .	 00000001	 Byte
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001F9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004AA Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawBoard  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000EC Public STDCALL
  draw_row . . . . . . . . . . .	L Near	 00000014 _TEXT	
  draw_col . . . . . . . . . . .	L Near	 0000001F _TEXT	
DrawInfo . . . . . . . . . . . .	P Near	 000000EC _TEXT	Length= 00000078 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000164 _TEXT	Length= 00000346 Public STDCALL
  pool_rand_loop . . . . . . . .	L Near	 00000173 _TEXT	
  char_init_loop . . . . . . . .	L Near	 000001A9 _TEXT	
  char_rand_loop . . . . . . . .	L Near	 000001CA _TEXT	
  loop_row . . . . . . . . . . .	L Near	 00000200 _TEXT	
  loop_col . . . . . . . . . . .	L Near	 0000020B _TEXT	
  game_loop  . . . . . . . . . .	L Near	 00000304 _TEXT	
  loop_row_1 . . . . . . . . . .	L Near	 00000456 _TEXT	
  loop_col_1 . . . . . . . . . .	L Near	 00000461 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CARD_BACK_CHAR . . . . . . . . .	Number	 00000023h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GRID_COLS  . . . . . . . . . . .	Number	 00000008h   
GRID_ELEM_SIZE . . . . . . . . .	Number	 00000002h   
GRID_ROWS  . . . . . . . . . . .	Number	 00000005h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUM_SYMBOLS  . . . . . . . . . .	Number	 00000014h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
POOL_SIZE  . . . . . . . . . . .	Number	 00000049h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cardColPadding . . . . . . . . .	Byte	 00000001 _DATA	
cardRowPadding . . . . . . . . .	Byte	 00000000 _DATA	
cursorX  . . . . . . . . . . . .	Byte	 00000002 _DATA	
cursorY  . . . . . . . . . . . .	Byte	 00000003 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
gridOriginX  . . . . . . . . . .	Byte	 00000054 _DATA	
gridOriginY  . . . . . . . . . .	Byte	 00000055 _DATA	
grid . . . . . . . . . . . . . .	Card	 00000004 _DATA	
infoStr1 . . . . . . . . . . . .	Byte	 0000016D _DATA	
infoStr2 . . . . . . . . . . . .	Byte	 00000181 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numAttempts  . . . . . . . . . .	DWord	 00000083 _DATA	
numFound . . . . . . . . . . . .	Byte	 00000082 _DATA	
peek1  . . . . . . . . . . . . .	DWord	 0000007E _DATA	
randSymbols  . . . . . . . . . .	Byte	 00000056 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
symbolPool . . . . . . . . . . .	Byte	 000001B0 _DATA	
welcomeMessage1  . . . . . . . .	Byte	 00000087 _DATA	
welcomeMessage2  . . . . . . . .	Byte	 000000A6 _DATA	
welcomeMessage3  . . . . . . . .	Byte	 000000CA _DATA	
welcomeMessage4  . . . . . . . .	Byte	 000000F1 _DATA	
welcomeMessage5  . . . . . . . .	Byte	 00000114 _DATA	
welcomeMessage6  . . . . . . . .	Byte	 00000151 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winMessage . . . . . . . . . . .	Byte	 00000195 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
